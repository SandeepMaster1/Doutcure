name: Build Kivy App (APK)

on:
  push:
    branches:
      - main  # or 'master', the branch you push to
  pull_request:
    branches:
      - main # or 'master'
  workflow_dispatch: # Allows manual trigger from the GitHub Actions tab

jobs:
  build_android:
    # Use Ubuntu for the Buildozer build process
    runs-on: ubuntu-latest
    
    # Set environment variables for Buildozer
    env:
      # Package name
      PACKAGE_NAME: com.doubtcure.app
      # App name
      APP_TITLE: Doubtcure
      # Python 3.9 is a common, stable version for Kivy builds
      PYTHON_VERSION: 3.9
      
    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 3. Install prerequisites
        # Buildozer and its dependencies
        run: pip install buildozer cython

      - name: 4. Create and Configure buildozer.spec (Including NDK)
        # This step uses 'sed' to ensure the buildozer.spec file has the correct settings
        run: |
          # Initialize buildozer.spec (silently ignore error if it already exists)
          buildozer init || true
          
          # Update key settings
          sed -i 's/^title = .*/title = '${{ env.APP_TITLE }}'/' buildozer.spec
          sed -i 's/^package\.name = .*/package.name = '${{ env.PACKAGE_NAME }}'/' buildozer.spec
          sed -i 's/^package\.domain = .*/package.domain = yourcompany.com/' buildozer.spec
          
          # Requirements based on your doubtly.py imports
          sed -i 's/^requirements = .*/requirements = python3,kivy,kivymd,plyer,requests,Pillow,pytesseract,sqlite3/' buildozer.spec
          
          # Set the minimum Android API level
          sed -i 's/^android\.minapi = .*/android.minapi = 24/' buildozer.spec
          # Set the target Android SDK API level
          sed -i 's/^android\.api = .*/android.api = 33/' buildozer.spec
          
          # ðŸ‘‡ðŸ‘‡ðŸ‘‡ EXPLICIT NDK CONFIGURATION ADDED HERE ðŸ‘‡ðŸ‘‡ðŸ‘‡
          # Set a specific NDK version (e.g., 25b is often stable with API 33)
          sed -i 's/#android\.ndk = .*/android.ndk = 25b/' buildozer.spec
          # If you also wanted to set the SDK manually (usually not needed):
          # sed -i 's/#android\.sdk = .*/android.sdk = 25/' buildozer.spec
          # ðŸ‘†ðŸ‘†ðŸ‘† END OF NDK CONFIGURATION ðŸ‘†ðŸ‘†ðŸ‘†
          
          # Permissions: internet, camera, gallery (storage), voice (mic)
          sed -i 's/#android\.permissions =/android.permissions = INTERNET,CAMERA,WRITE_EXTERNAL_STORAGE,RECORD_AUDIO/' buildozer.spec
          
          # Rename app's main file to doubtly.py
          sed -i 's/^source\.include_exts = .*/source.include_exts = py,png,jpg,kv,atlas,xml,json,db/' buildozer.spec
          sed -i 's/^main\.py = .*/main.py = doubtly.py/' buildozer.spec

      - name: 5. Build Debug APK
        # This is the command that builds the Android package
        run: buildozer android debug

      - name: 6. Upload APK as Artifact
        # Saves the APK file to the GitHub Actions run page
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_TITLE }}_apk
          path: bin/*.apk

      - name: 7. Get APK name for Release
        id: get_apk_name
        run: echo "APK_FILE=$(basename $(ls bin/*.apk))" >> $GITHUB_OUTPUT
        
      - name: 8. Create GitHub Release with APK
        # Creates a draft release on GitHub for easy download
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.ref_name }} Build
          files: bin/${{ steps.get_apk_name.outputs.APK_FILE }}
          draft: true
          
