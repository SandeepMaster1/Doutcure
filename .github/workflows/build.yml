name: Build Kivy App (APK)

on:
  push:
    branches:
      - main  # or 'master', the branch you push to
  pull_request:
    branches:
      - main # or 'master'
  workflow_dispatch: # Allows manual trigger from the GitHub Actions tab

jobs:
  build_android:
    # Use Ubuntu for the Buildozer build process
    runs-on: ubuntu-latest
    
    # Optional: Set environment variables for Buildozer
    env:
      # Change this to your app's package name
      PACKAGE_NAME: com.yourcompany.doubtcure
      # Change this to your desired APK name
      APP_TITLE: Doubtcure
      # Use Python 3.9 as it's often compatible with Kivy/Buildozer
      PYTHON_VERSION: 3.9
      
    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 3. Install prerequisites
        # Buildozer and its dependencies
        run: pip install buildozer cython

      - name: 4. Create and Configure buildozer.spec
        # This step is crucial. It ensures the buildozer.spec file exists 
        # and configures key properties needed for the build based on your request.
        run: |
          # Initialize buildozer.spec if it doesn't exist
          buildozer init || true
          
          # Update key settings in buildozer.spec (mandatory for a good build)
          sed -i 's/^title = .*/title = '${{ env.APP_TITLE }}'/' buildozer.spec
          sed -i 's/^package\.name = .*/package.name = '${{ env.PACKAGE_NAME }}'/' buildozer.spec
          sed -i 's/^package\.domain = .*/package.domain = yourcompany.com/' buildozer.spec
          sed -i 's/^requirements = .*/requirements = python3,kivy,kivymd,plyer,requests,Pillow,pytesseract,sqlite3/' buildozer.spec
          # Set the Android SDK API level
          sed -i 's/^android\.api = .*/android.api = 33/' buildozer.spec
          # Permissions required by your app
          sed -i 's/#android\.permissions =/android.permissions = INTERNET,CAMERA,WRITE_EXTERNAL_STORAGE,RECORD_AUDIO/' buildozer.spec
          
          # Print spec file to verify changes (optional)
          cat buildozer.spec

      - name: 5. Build Debug APK (Takes a long time on first run)
        # The 'android debug' command will download NDK, SDK, etc., which is time-consuming.
        run: buildozer android debug

      - name: 6. Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_TITLE }}_apk
          # The resulting APK is typically found here
          path: bin/*.apk

      - name: 7. Get APK name for Release (Optional but helpful)
        id: get_apk_name
        # Find the generated APK file name
        run: echo "APK_FILE=$(basename $(ls bin/*.apk))" >> $GITHUB_OUTPUT
        
      - name: 8. Create GitHub Release with APK
        # This step creates a draft release on GitHub with the built APK attached.
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only create release on main branch push
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.ref_name }} Build ${{ github.sha }}
          files: bin/${{ steps.get_apk_name.outputs.APK_FILE }}
          draft: true # Keep it as a draft until you publish it manually
